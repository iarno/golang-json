// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package user

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeEjUser(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.Statuses = nil
			} else {
				in.Delim('[')
				if out.Statuses == nil {
					if !in.IsDelim(']') {
						out.Statuses = make([]struct {
							Metadata struct {
								ResultType      string `json:"result_type"`
								IsoLanguageCode string `json:"iso_language_code"`
							} `json:"metadata"`
							CreatedAt            string      `json:"created_at"`
							ID                   int64       `json:"id"`
							IDStr                string      `json:"id_str"`
							Text                 string      `json:"text"`
							Source               string      `json:"source"`
							Truncated            bool        `json:"truncated"`
							InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
							InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
							InReplyToUserID      int         `json:"in_reply_to_user_id"`
							InReplyToUserIDStr   string      `json:"in_reply_to_user_id_str"`
							InReplyToScreenName  string      `json:"in_reply_to_screen_name"`
							User                 struct {
								ID          int         `json:"id"`
								IDStr       string      `json:"id_str"`
								Name        string      `json:"name"`
								ScreenName  string      `json:"screen_name"`
								Location    string      `json:"location"`
								Description string      `json:"description"`
								URL         interface{} `json:"url"`
								Entities    struct {
									Description struct {
										Urls []interface{} `json:"urls"`
									} `json:"description"`
								} `json:"entities"`
								Protected                      bool        `json:"protected"`
								FollowersCount                 int         `json:"followers_count"`
								FriendsCount                   int         `json:"friends_count"`
								ListedCount                    int         `json:"listed_count"`
								CreatedAt                      string      `json:"created_at"`
								FavouritesCount                int         `json:"favourites_count"`
								UtcOffset                      interface{} `json:"utc_offset"`
								TimeZone                       interface{} `json:"time_zone"`
								GeoEnabled                     bool        `json:"geo_enabled"`
								Verified                       bool        `json:"verified"`
								StatusesCount                  int         `json:"statuses_count"`
								Lang                           string      `json:"lang"`
								ContributorsEnabled            bool        `json:"contributors_enabled"`
								IsTranslator                   bool        `json:"is_translator"`
								IsTranslationEnabled           bool        `json:"is_translation_enabled"`
								ProfileBackgroundColor         string      `json:"profile_background_color"`
								ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
								ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
								ProfileBackgroundTile          bool        `json:"profile_background_tile"`
								ProfileImageURL                string      `json:"profile_image_url"`
								ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
								ProfileBannerURL               string      `json:"profile_banner_url"`
								ProfileLinkColor               string      `json:"profile_link_color"`
								ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
								ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
								ProfileTextColor               string      `json:"profile_text_color"`
								ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
								DefaultProfile                 bool        `json:"default_profile"`
								DefaultProfileImage            bool        `json:"default_profile_image"`
								Following                      bool        `json:"following"`
								FollowRequestSent              bool        `json:"follow_request_sent"`
								Notifications                  bool        `json:"notifications"`
							} `json:"user"`
							Geo           interface{} `json:"geo"`
							Coordinates   interface{} `json:"coordinates"`
							Place         interface{} `json:"place"`
							Contributors  interface{} `json:"contributors"`
							RetweetCount  int         `json:"retweet_count"`
							FavoriteCount int         `json:"favorite_count"`
							Entities      struct {
								Hashtags     []interface{} `json:"hashtags"`
								Symbols      []interface{} `json:"symbols"`
								Urls         []interface{} `json:"urls"`
								UserMentions []struct {
									ScreenName string `json:"screen_name"`
									Name       string `json:"name"`
									ID         int    `json:"id"`
									IDStr      string `json:"id_str"`
									Indices    []int  `json:"indices"`
								} `json:"user_mentions"`
							} `json:"entities"`
							Favorited       bool   `json:"favorited"`
							Retweeted       bool   `json:"retweeted"`
							Lang            string `json:"lang"`
							RetweetedStatus struct {
								Metadata struct {
									ResultType      string `json:"result_type"`
									IsoLanguageCode string `json:"iso_language_code"`
								} `json:"metadata"`
								CreatedAt            string      `json:"created_at"`
								ID                   int64       `json:"id"`
								IDStr                string      `json:"id_str"`
								Text                 string      `json:"text"`
								Source               string      `json:"source"`
								Truncated            bool        `json:"truncated"`
								InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
								InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
								InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
								InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
								InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
								User                 struct {
									ID          int         `json:"id"`
									IDStr       string      `json:"id_str"`
									Name        string      `json:"name"`
									ScreenName  string      `json:"screen_name"`
									Location    string      `json:"location"`
									Description string      `json:"description"`
									URL         interface{} `json:"url"`
									Entities    struct {
										Description struct {
											Urls []struct {
												URL         string `json:"url"`
												ExpandedURL string `json:"expanded_url"`
												DisplayURL  string `json:"display_url"`
												Indices     []int  `json:"indices"`
											} `json:"urls"`
										} `json:"description"`
									} `json:"entities"`
									Protected                      bool   `json:"protected"`
									FollowersCount                 int    `json:"followers_count"`
									FriendsCount                   int    `json:"friends_count"`
									ListedCount                    int    `json:"listed_count"`
									CreatedAt                      string `json:"created_at"`
									FavouritesCount                int    `json:"favourites_count"`
									UtcOffset                      int    `json:"utc_offset"`
									TimeZone                       string `json:"time_zone"`
									GeoEnabled                     bool   `json:"geo_enabled"`
									Verified                       bool   `json:"verified"`
									StatusesCount                  int    `json:"statuses_count"`
									Lang                           string `json:"lang"`
									ContributorsEnabled            bool   `json:"contributors_enabled"`
									IsTranslator                   bool   `json:"is_translator"`
									IsTranslationEnabled           bool   `json:"is_translation_enabled"`
									ProfileBackgroundColor         string `json:"profile_background_color"`
									ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
									ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
									ProfileBackgroundTile          bool   `json:"profile_background_tile"`
									ProfileImageURL                string `json:"profile_image_url"`
									ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
									ProfileBannerURL               string `json:"profile_banner_url"`
									ProfileLinkColor               string `json:"profile_link_color"`
									ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
									ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
									ProfileTextColor               string `json:"profile_text_color"`
									ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
									DefaultProfile                 bool   `json:"default_profile"`
									DefaultProfileImage            bool   `json:"default_profile_image"`
									Following                      bool   `json:"following"`
									FollowRequestSent              bool   `json:"follow_request_sent"`
									Notifications                  bool   `json:"notifications"`
								} `json:"user"`
								Geo           interface{} `json:"geo"`
								Coordinates   interface{} `json:"coordinates"`
								Place         interface{} `json:"place"`
								Contributors  interface{} `json:"contributors"`
								RetweetCount  int         `json:"retweet_count"`
								FavoriteCount int         `json:"favorite_count"`
								Entities      struct {
									Hashtags     []interface{} `json:"hashtags"`
									Symbols      []interface{} `json:"symbols"`
									Urls         []interface{} `json:"urls"`
									UserMentions []interface{} `json:"user_mentions"`
									Media        []struct {
										ID            int64  `json:"id"`
										IDStr         string `json:"id_str"`
										Indices       []int  `json:"indices"`
										MediaURL      string `json:"media_url"`
										MediaURLHTTPS string `json:"media_url_https"`
										URL           string `json:"url"`
										DisplayURL    string `json:"display_url"`
										ExpandedURL   string `json:"expanded_url"`
										Type          string `json:"type"`
										Sizes         struct {
											Medium struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"medium"`
											Small struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"small"`
											Thumb struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"thumb"`
											Large struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"large"`
										} `json:"sizes"`
									} `json:"media"`
								} `json:"entities"`
								Favorited         bool   `json:"favorited"`
								Retweeted         bool   `json:"retweeted"`
								PossiblySensitive bool   `json:"possibly_sensitive"`
								Lang              string `json:"lang"`
							} `json:"retweeted_status,omitempty"`
							PossiblySensitive bool `json:"possibly_sensitive,omitempty"`
						}, 0, 0)
					} else {
						out.Statuses = []struct {
							Metadata struct {
								ResultType      string `json:"result_type"`
								IsoLanguageCode string `json:"iso_language_code"`
							} `json:"metadata"`
							CreatedAt            string      `json:"created_at"`
							ID                   int64       `json:"id"`
							IDStr                string      `json:"id_str"`
							Text                 string      `json:"text"`
							Source               string      `json:"source"`
							Truncated            bool        `json:"truncated"`
							InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
							InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
							InReplyToUserID      int         `json:"in_reply_to_user_id"`
							InReplyToUserIDStr   string      `json:"in_reply_to_user_id_str"`
							InReplyToScreenName  string      `json:"in_reply_to_screen_name"`
							User                 struct {
								ID          int         `json:"id"`
								IDStr       string      `json:"id_str"`
								Name        string      `json:"name"`
								ScreenName  string      `json:"screen_name"`
								Location    string      `json:"location"`
								Description string      `json:"description"`
								URL         interface{} `json:"url"`
								Entities    struct {
									Description struct {
										Urls []interface{} `json:"urls"`
									} `json:"description"`
								} `json:"entities"`
								Protected                      bool        `json:"protected"`
								FollowersCount                 int         `json:"followers_count"`
								FriendsCount                   int         `json:"friends_count"`
								ListedCount                    int         `json:"listed_count"`
								CreatedAt                      string      `json:"created_at"`
								FavouritesCount                int         `json:"favourites_count"`
								UtcOffset                      interface{} `json:"utc_offset"`
								TimeZone                       interface{} `json:"time_zone"`
								GeoEnabled                     bool        `json:"geo_enabled"`
								Verified                       bool        `json:"verified"`
								StatusesCount                  int         `json:"statuses_count"`
								Lang                           string      `json:"lang"`
								ContributorsEnabled            bool        `json:"contributors_enabled"`
								IsTranslator                   bool        `json:"is_translator"`
								IsTranslationEnabled           bool        `json:"is_translation_enabled"`
								ProfileBackgroundColor         string      `json:"profile_background_color"`
								ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
								ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
								ProfileBackgroundTile          bool        `json:"profile_background_tile"`
								ProfileImageURL                string      `json:"profile_image_url"`
								ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
								ProfileBannerURL               string      `json:"profile_banner_url"`
								ProfileLinkColor               string      `json:"profile_link_color"`
								ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
								ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
								ProfileTextColor               string      `json:"profile_text_color"`
								ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
								DefaultProfile                 bool        `json:"default_profile"`
								DefaultProfileImage            bool        `json:"default_profile_image"`
								Following                      bool        `json:"following"`
								FollowRequestSent              bool        `json:"follow_request_sent"`
								Notifications                  bool        `json:"notifications"`
							} `json:"user"`
							Geo           interface{} `json:"geo"`
							Coordinates   interface{} `json:"coordinates"`
							Place         interface{} `json:"place"`
							Contributors  interface{} `json:"contributors"`
							RetweetCount  int         `json:"retweet_count"`
							FavoriteCount int         `json:"favorite_count"`
							Entities      struct {
								Hashtags     []interface{} `json:"hashtags"`
								Symbols      []interface{} `json:"symbols"`
								Urls         []interface{} `json:"urls"`
								UserMentions []struct {
									ScreenName string `json:"screen_name"`
									Name       string `json:"name"`
									ID         int    `json:"id"`
									IDStr      string `json:"id_str"`
									Indices    []int  `json:"indices"`
								} `json:"user_mentions"`
							} `json:"entities"`
							Favorited       bool   `json:"favorited"`
							Retweeted       bool   `json:"retweeted"`
							Lang            string `json:"lang"`
							RetweetedStatus struct {
								Metadata struct {
									ResultType      string `json:"result_type"`
									IsoLanguageCode string `json:"iso_language_code"`
								} `json:"metadata"`
								CreatedAt            string      `json:"created_at"`
								ID                   int64       `json:"id"`
								IDStr                string      `json:"id_str"`
								Text                 string      `json:"text"`
								Source               string      `json:"source"`
								Truncated            bool        `json:"truncated"`
								InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
								InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
								InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
								InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
								InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
								User                 struct {
									ID          int         `json:"id"`
									IDStr       string      `json:"id_str"`
									Name        string      `json:"name"`
									ScreenName  string      `json:"screen_name"`
									Location    string      `json:"location"`
									Description string      `json:"description"`
									URL         interface{} `json:"url"`
									Entities    struct {
										Description struct {
											Urls []struct {
												URL         string `json:"url"`
												ExpandedURL string `json:"expanded_url"`
												DisplayURL  string `json:"display_url"`
												Indices     []int  `json:"indices"`
											} `json:"urls"`
										} `json:"description"`
									} `json:"entities"`
									Protected                      bool   `json:"protected"`
									FollowersCount                 int    `json:"followers_count"`
									FriendsCount                   int    `json:"friends_count"`
									ListedCount                    int    `json:"listed_count"`
									CreatedAt                      string `json:"created_at"`
									FavouritesCount                int    `json:"favourites_count"`
									UtcOffset                      int    `json:"utc_offset"`
									TimeZone                       string `json:"time_zone"`
									GeoEnabled                     bool   `json:"geo_enabled"`
									Verified                       bool   `json:"verified"`
									StatusesCount                  int    `json:"statuses_count"`
									Lang                           string `json:"lang"`
									ContributorsEnabled            bool   `json:"contributors_enabled"`
									IsTranslator                   bool   `json:"is_translator"`
									IsTranslationEnabled           bool   `json:"is_translation_enabled"`
									ProfileBackgroundColor         string `json:"profile_background_color"`
									ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
									ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
									ProfileBackgroundTile          bool   `json:"profile_background_tile"`
									ProfileImageURL                string `json:"profile_image_url"`
									ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
									ProfileBannerURL               string `json:"profile_banner_url"`
									ProfileLinkColor               string `json:"profile_link_color"`
									ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
									ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
									ProfileTextColor               string `json:"profile_text_color"`
									ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
									DefaultProfile                 bool   `json:"default_profile"`
									DefaultProfileImage            bool   `json:"default_profile_image"`
									Following                      bool   `json:"following"`
									FollowRequestSent              bool   `json:"follow_request_sent"`
									Notifications                  bool   `json:"notifications"`
								} `json:"user"`
								Geo           interface{} `json:"geo"`
								Coordinates   interface{} `json:"coordinates"`
								Place         interface{} `json:"place"`
								Contributors  interface{} `json:"contributors"`
								RetweetCount  int         `json:"retweet_count"`
								FavoriteCount int         `json:"favorite_count"`
								Entities      struct {
									Hashtags     []interface{} `json:"hashtags"`
									Symbols      []interface{} `json:"symbols"`
									Urls         []interface{} `json:"urls"`
									UserMentions []interface{} `json:"user_mentions"`
									Media        []struct {
										ID            int64  `json:"id"`
										IDStr         string `json:"id_str"`
										Indices       []int  `json:"indices"`
										MediaURL      string `json:"media_url"`
										MediaURLHTTPS string `json:"media_url_https"`
										URL           string `json:"url"`
										DisplayURL    string `json:"display_url"`
										ExpandedURL   string `json:"expanded_url"`
										Type          string `json:"type"`
										Sizes         struct {
											Medium struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"medium"`
											Small struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"small"`
											Thumb struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"thumb"`
											Large struct {
												W      int    `json:"w"`
												H      int    `json:"h"`
												Resize string `json:"resize"`
											} `json:"large"`
										} `json:"sizes"`
									} `json:"media"`
								} `json:"entities"`
								Favorited         bool   `json:"favorited"`
								Retweeted         bool   `json:"retweeted"`
								PossiblySensitive bool   `json:"possibly_sensitive"`
								Lang              string `json:"lang"`
							} `json:"retweeted_status,omitempty"`
							PossiblySensitive bool `json:"possibly_sensitive,omitempty"`
						}{}
					}
				} else {
					out.Statuses = (out.Statuses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Metadata struct {
							ResultType      string `json:"result_type"`
							IsoLanguageCode string `json:"iso_language_code"`
						} `json:"metadata"`
						CreatedAt            string      `json:"created_at"`
						ID                   int64       `json:"id"`
						IDStr                string      `json:"id_str"`
						Text                 string      `json:"text"`
						Source               string      `json:"source"`
						Truncated            bool        `json:"truncated"`
						InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
						InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
						InReplyToUserID      int         `json:"in_reply_to_user_id"`
						InReplyToUserIDStr   string      `json:"in_reply_to_user_id_str"`
						InReplyToScreenName  string      `json:"in_reply_to_screen_name"`
						User                 struct {
							ID          int         `json:"id"`
							IDStr       string      `json:"id_str"`
							Name        string      `json:"name"`
							ScreenName  string      `json:"screen_name"`
							Location    string      `json:"location"`
							Description string      `json:"description"`
							URL         interface{} `json:"url"`
							Entities    struct {
								Description struct {
									Urls []interface{} `json:"urls"`
								} `json:"description"`
							} `json:"entities"`
							Protected                      bool        `json:"protected"`
							FollowersCount                 int         `json:"followers_count"`
							FriendsCount                   int         `json:"friends_count"`
							ListedCount                    int         `json:"listed_count"`
							CreatedAt                      string      `json:"created_at"`
							FavouritesCount                int         `json:"favourites_count"`
							UtcOffset                      interface{} `json:"utc_offset"`
							TimeZone                       interface{} `json:"time_zone"`
							GeoEnabled                     bool        `json:"geo_enabled"`
							Verified                       bool        `json:"verified"`
							StatusesCount                  int         `json:"statuses_count"`
							Lang                           string      `json:"lang"`
							ContributorsEnabled            bool        `json:"contributors_enabled"`
							IsTranslator                   bool        `json:"is_translator"`
							IsTranslationEnabled           bool        `json:"is_translation_enabled"`
							ProfileBackgroundColor         string      `json:"profile_background_color"`
							ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
							ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
							ProfileBackgroundTile          bool        `json:"profile_background_tile"`
							ProfileImageURL                string      `json:"profile_image_url"`
							ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
							ProfileBannerURL               string      `json:"profile_banner_url"`
							ProfileLinkColor               string      `json:"profile_link_color"`
							ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
							ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
							ProfileTextColor               string      `json:"profile_text_color"`
							ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
							DefaultProfile                 bool        `json:"default_profile"`
							DefaultProfileImage            bool        `json:"default_profile_image"`
							Following                      bool        `json:"following"`
							FollowRequestSent              bool        `json:"follow_request_sent"`
							Notifications                  bool        `json:"notifications"`
						} `json:"user"`
						Geo           interface{} `json:"geo"`
						Coordinates   interface{} `json:"coordinates"`
						Place         interface{} `json:"place"`
						Contributors  interface{} `json:"contributors"`
						RetweetCount  int         `json:"retweet_count"`
						FavoriteCount int         `json:"favorite_count"`
						Entities      struct {
							Hashtags     []interface{} `json:"hashtags"`
							Symbols      []interface{} `json:"symbols"`
							Urls         []interface{} `json:"urls"`
							UserMentions []struct {
								ScreenName string `json:"screen_name"`
								Name       string `json:"name"`
								ID         int    `json:"id"`
								IDStr      string `json:"id_str"`
								Indices    []int  `json:"indices"`
							} `json:"user_mentions"`
						} `json:"entities"`
						Favorited       bool   `json:"favorited"`
						Retweeted       bool   `json:"retweeted"`
						Lang            string `json:"lang"`
						RetweetedStatus struct {
							Metadata struct {
								ResultType      string `json:"result_type"`
								IsoLanguageCode string `json:"iso_language_code"`
							} `json:"metadata"`
							CreatedAt            string      `json:"created_at"`
							ID                   int64       `json:"id"`
							IDStr                string      `json:"id_str"`
							Text                 string      `json:"text"`
							Source               string      `json:"source"`
							Truncated            bool        `json:"truncated"`
							InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
							InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
							InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
							InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
							InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
							User                 struct {
								ID          int         `json:"id"`
								IDStr       string      `json:"id_str"`
								Name        string      `json:"name"`
								ScreenName  string      `json:"screen_name"`
								Location    string      `json:"location"`
								Description string      `json:"description"`
								URL         interface{} `json:"url"`
								Entities    struct {
									Description struct {
										Urls []struct {
											URL         string `json:"url"`
											ExpandedURL string `json:"expanded_url"`
											DisplayURL  string `json:"display_url"`
											Indices     []int  `json:"indices"`
										} `json:"urls"`
									} `json:"description"`
								} `json:"entities"`
								Protected                      bool   `json:"protected"`
								FollowersCount                 int    `json:"followers_count"`
								FriendsCount                   int    `json:"friends_count"`
								ListedCount                    int    `json:"listed_count"`
								CreatedAt                      string `json:"created_at"`
								FavouritesCount                int    `json:"favourites_count"`
								UtcOffset                      int    `json:"utc_offset"`
								TimeZone                       string `json:"time_zone"`
								GeoEnabled                     bool   `json:"geo_enabled"`
								Verified                       bool   `json:"verified"`
								StatusesCount                  int    `json:"statuses_count"`
								Lang                           string `json:"lang"`
								ContributorsEnabled            bool   `json:"contributors_enabled"`
								IsTranslator                   bool   `json:"is_translator"`
								IsTranslationEnabled           bool   `json:"is_translation_enabled"`
								ProfileBackgroundColor         string `json:"profile_background_color"`
								ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
								ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
								ProfileBackgroundTile          bool   `json:"profile_background_tile"`
								ProfileImageURL                string `json:"profile_image_url"`
								ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
								ProfileBannerURL               string `json:"profile_banner_url"`
								ProfileLinkColor               string `json:"profile_link_color"`
								ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
								ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
								ProfileTextColor               string `json:"profile_text_color"`
								ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
								DefaultProfile                 bool   `json:"default_profile"`
								DefaultProfileImage            bool   `json:"default_profile_image"`
								Following                      bool   `json:"following"`
								FollowRequestSent              bool   `json:"follow_request_sent"`
								Notifications                  bool   `json:"notifications"`
							} `json:"user"`
							Geo           interface{} `json:"geo"`
							Coordinates   interface{} `json:"coordinates"`
							Place         interface{} `json:"place"`
							Contributors  interface{} `json:"contributors"`
							RetweetCount  int         `json:"retweet_count"`
							FavoriteCount int         `json:"favorite_count"`
							Entities      struct {
								Hashtags     []interface{} `json:"hashtags"`
								Symbols      []interface{} `json:"symbols"`
								Urls         []interface{} `json:"urls"`
								UserMentions []interface{} `json:"user_mentions"`
								Media        []struct {
									ID            int64  `json:"id"`
									IDStr         string `json:"id_str"`
									Indices       []int  `json:"indices"`
									MediaURL      string `json:"media_url"`
									MediaURLHTTPS string `json:"media_url_https"`
									URL           string `json:"url"`
									DisplayURL    string `json:"display_url"`
									ExpandedURL   string `json:"expanded_url"`
									Type          string `json:"type"`
									Sizes         struct {
										Medium struct {
											W      int    `json:"w"`
											H      int    `json:"h"`
											Resize string `json:"resize"`
										} `json:"medium"`
										Small struct {
											W      int    `json:"w"`
											H      int    `json:"h"`
											Resize string `json:"resize"`
										} `json:"small"`
										Thumb struct {
											W      int    `json:"w"`
											H      int    `json:"h"`
											Resize string `json:"resize"`
										} `json:"thumb"`
										Large struct {
											W      int    `json:"w"`
											H      int    `json:"h"`
											Resize string `json:"resize"`
										} `json:"large"`
									} `json:"sizes"`
								} `json:"media"`
							} `json:"entities"`
							Favorited         bool   `json:"favorited"`
							Retweeted         bool   `json:"retweeted"`
							PossiblySensitive bool   `json:"possibly_sensitive"`
							Lang              string `json:"lang"`
						} `json:"retweeted_status,omitempty"`
						PossiblySensitive bool `json:"possibly_sensitive,omitempty"`
					}
					easyjson9e1087fdDecode(in, &v1)
					out.Statuses = append(out.Statuses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "search_metadata":
			easyjson9e1087fdDecode1(in, &out.SearchMetadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeEjUser(out *jwriter.Writer, in Users) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix[1:])
		if in.Statuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Statuses {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson9e1087fdEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"search_metadata\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode1(out, in.SearchMetadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeEjUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeEjUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeEjUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeEjUser(l, v)
}
func easyjson9e1087fdDecode1(in *jlexer.Lexer, out *struct {
	CompletedIn float64 `json:"completed_in"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    string  `json:"max_id_str"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	Count       int     `json:"count"`
	SinceID     int     `json:"since_id"`
	SinceIDStr  string  `json:"since_id_str"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completed_in":
			out.CompletedIn = float64(in.Float64())
		case "max_id":
			out.MaxID = int64(in.Int64())
		case "max_id_str":
			out.MaxIDStr = string(in.String())
		case "next_results":
			out.NextResults = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "refresh_url":
			out.RefreshURL = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "since_id":
			out.SinceID = int(in.Int())
		case "since_id_str":
			out.SinceIDStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode1(out *jwriter.Writer, in struct {
	CompletedIn float64 `json:"completed_in"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    string  `json:"max_id_str"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	Count       int     `json:"count"`
	SinceID     int     `json:"since_id"`
	SinceIDStr  string  `json:"since_id_str"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completed_in\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CompletedIn))
	}
	{
		const prefix string = ",\"max_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxID))
	}
	{
		const prefix string = ",\"max_id_str\":"
		out.RawString(prefix)
		out.String(string(in.MaxIDStr))
	}
	{
		const prefix string = ",\"next_results\":"
		out.RawString(prefix)
		out.String(string(in.NextResults))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"refresh_url\":"
		out.RawString(prefix)
		out.String(string(in.RefreshURL))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"since_id\":"
		out.RawString(prefix)
		out.Int(int(in.SinceID))
	}
	{
		const prefix string = ",\"since_id_str\":"
		out.RawString(prefix)
		out.String(string(in.SinceIDStr))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode(in *jlexer.Lexer, out *struct {
	Metadata struct {
		ResultType      string `json:"result_type"`
		IsoLanguageCode string `json:"iso_language_code"`
	} `json:"metadata"`
	CreatedAt            string      `json:"created_at"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	Text                 string      `json:"text"`
	Source               string      `json:"source"`
	Truncated            bool        `json:"truncated"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      int         `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   string      `json:"in_reply_to_user_id_str"`
	InReplyToScreenName  string      `json:"in_reply_to_screen_name"`
	User                 struct {
		ID          int         `json:"id"`
		IDStr       string      `json:"id_str"`
		Name        string      `json:"name"`
		ScreenName  string      `json:"screen_name"`
		Location    string      `json:"location"`
		Description string      `json:"description"`
		URL         interface{} `json:"url"`
		Entities    struct {
			Description struct {
				Urls []interface{} `json:"urls"`
			} `json:"description"`
		} `json:"entities"`
		Protected                      bool        `json:"protected"`
		FollowersCount                 int         `json:"followers_count"`
		FriendsCount                   int         `json:"friends_count"`
		ListedCount                    int         `json:"listed_count"`
		CreatedAt                      string      `json:"created_at"`
		FavouritesCount                int         `json:"favourites_count"`
		UtcOffset                      interface{} `json:"utc_offset"`
		TimeZone                       interface{} `json:"time_zone"`
		GeoEnabled                     bool        `json:"geo_enabled"`
		Verified                       bool        `json:"verified"`
		StatusesCount                  int         `json:"statuses_count"`
		Lang                           string      `json:"lang"`
		ContributorsEnabled            bool        `json:"contributors_enabled"`
		IsTranslator                   bool        `json:"is_translator"`
		IsTranslationEnabled           bool        `json:"is_translation_enabled"`
		ProfileBackgroundColor         string      `json:"profile_background_color"`
		ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool        `json:"profile_background_tile"`
		ProfileImageURL                string      `json:"profile_image_url"`
		ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
		ProfileBannerURL               string      `json:"profile_banner_url"`
		ProfileLinkColor               string      `json:"profile_link_color"`
		ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string      `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
		DefaultProfile                 bool        `json:"default_profile"`
		DefaultProfileImage            bool        `json:"default_profile_image"`
		Following                      bool        `json:"following"`
		FollowRequestSent              bool        `json:"follow_request_sent"`
		Notifications                  bool        `json:"notifications"`
	} `json:"user"`
	Geo           interface{} `json:"geo"`
	Coordinates   interface{} `json:"coordinates"`
	Place         interface{} `json:"place"`
	Contributors  interface{} `json:"contributors"`
	RetweetCount  int         `json:"retweet_count"`
	FavoriteCount int         `json:"favorite_count"`
	Entities      struct {
		Hashtags     []interface{} `json:"hashtags"`
		Symbols      []interface{} `json:"symbols"`
		Urls         []interface{} `json:"urls"`
		UserMentions []struct {
			ScreenName string `json:"screen_name"`
			Name       string `json:"name"`
			ID         int    `json:"id"`
			IDStr      string `json:"id_str"`
			Indices    []int  `json:"indices"`
		} `json:"user_mentions"`
	} `json:"entities"`
	Favorited       bool   `json:"favorited"`
	Retweeted       bool   `json:"retweeted"`
	Lang            string `json:"lang"`
	RetweetedStatus struct {
		Metadata struct {
			ResultType      string `json:"result_type"`
			IsoLanguageCode string `json:"iso_language_code"`
		} `json:"metadata"`
		CreatedAt            string      `json:"created_at"`
		ID                   int64       `json:"id"`
		IDStr                string      `json:"id_str"`
		Text                 string      `json:"text"`
		Source               string      `json:"source"`
		Truncated            bool        `json:"truncated"`
		InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
		InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
		InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
		InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
		InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
		User                 struct {
			ID          int         `json:"id"`
			IDStr       string      `json:"id_str"`
			Name        string      `json:"name"`
			ScreenName  string      `json:"screen_name"`
			Location    string      `json:"location"`
			Description string      `json:"description"`
			URL         interface{} `json:"url"`
			Entities    struct {
				Description struct {
					Urls []struct {
						URL         string `json:"url"`
						ExpandedURL string `json:"expanded_url"`
						DisplayURL  string `json:"display_url"`
						Indices     []int  `json:"indices"`
					} `json:"urls"`
				} `json:"description"`
			} `json:"entities"`
			Protected                      bool   `json:"protected"`
			FollowersCount                 int    `json:"followers_count"`
			FriendsCount                   int    `json:"friends_count"`
			ListedCount                    int    `json:"listed_count"`
			CreatedAt                      string `json:"created_at"`
			FavouritesCount                int    `json:"favourites_count"`
			UtcOffset                      int    `json:"utc_offset"`
			TimeZone                       string `json:"time_zone"`
			GeoEnabled                     bool   `json:"geo_enabled"`
			Verified                       bool   `json:"verified"`
			StatusesCount                  int    `json:"statuses_count"`
			Lang                           string `json:"lang"`
			ContributorsEnabled            bool   `json:"contributors_enabled"`
			IsTranslator                   bool   `json:"is_translator"`
			IsTranslationEnabled           bool   `json:"is_translation_enabled"`
			ProfileBackgroundColor         string `json:"profile_background_color"`
			ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
			ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
			ProfileBackgroundTile          bool   `json:"profile_background_tile"`
			ProfileImageURL                string `json:"profile_image_url"`
			ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
			ProfileBannerURL               string `json:"profile_banner_url"`
			ProfileLinkColor               string `json:"profile_link_color"`
			ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
			ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
			ProfileTextColor               string `json:"profile_text_color"`
			ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
			DefaultProfile                 bool   `json:"default_profile"`
			DefaultProfileImage            bool   `json:"default_profile_image"`
			Following                      bool   `json:"following"`
			FollowRequestSent              bool   `json:"follow_request_sent"`
			Notifications                  bool   `json:"notifications"`
		} `json:"user"`
		Geo           interface{} `json:"geo"`
		Coordinates   interface{} `json:"coordinates"`
		Place         interface{} `json:"place"`
		Contributors  interface{} `json:"contributors"`
		RetweetCount  int         `json:"retweet_count"`
		FavoriteCount int         `json:"favorite_count"`
		Entities      struct {
			Hashtags     []interface{} `json:"hashtags"`
			Symbols      []interface{} `json:"symbols"`
			Urls         []interface{} `json:"urls"`
			UserMentions []interface{} `json:"user_mentions"`
			Media        []struct {
				ID            int64  `json:"id"`
				IDStr         string `json:"id_str"`
				Indices       []int  `json:"indices"`
				MediaURL      string `json:"media_url"`
				MediaURLHTTPS string `json:"media_url_https"`
				URL           string `json:"url"`
				DisplayURL    string `json:"display_url"`
				ExpandedURL   string `json:"expanded_url"`
				Type          string `json:"type"`
				Sizes         struct {
					Medium struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"medium"`
					Small struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"small"`
					Thumb struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"thumb"`
					Large struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"large"`
				} `json:"sizes"`
			} `json:"media"`
		} `json:"entities"`
		Favorited         bool   `json:"favorited"`
		Retweeted         bool   `json:"retweeted"`
		PossiblySensitive bool   `json:"possibly_sensitive"`
		Lang              string `json:"lang"`
	} `json:"retweeted_status,omitempty"`
	PossiblySensitive bool `json:"possibly_sensitive,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjson9e1087fdDecode2(in, &out.Metadata)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "in_reply_to_status_id":
			if m, ok := out.InReplyToStatusID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusID = in.Interface()
			}
		case "in_reply_to_status_id_str":
			if m, ok := out.InReplyToStatusIDStr.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusIDStr.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusIDStr = in.Interface()
			}
		case "in_reply_to_user_id":
			out.InReplyToUserID = int(in.Int())
		case "in_reply_to_user_id_str":
			out.InReplyToUserIDStr = string(in.String())
		case "in_reply_to_screen_name":
			out.InReplyToScreenName = string(in.String())
		case "user":
			easyjson9e1087fdDecode3(in, &out.User)
		case "geo":
			if m, ok := out.Geo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Geo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Geo = in.Interface()
			}
		case "coordinates":
			if m, ok := out.Coordinates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coordinates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coordinates = in.Interface()
			}
		case "place":
			if m, ok := out.Place.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Place.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Place = in.Interface()
			}
		case "contributors":
			if m, ok := out.Contributors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Contributors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Contributors = in.Interface()
			}
		case "retweet_count":
			out.RetweetCount = int(in.Int())
		case "favorite_count":
			out.FavoriteCount = int(in.Int())
		case "entities":
			easyjson9e1087fdDecode4(in, &out.Entities)
		case "favorited":
			out.Favorited = bool(in.Bool())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "lang":
			out.Lang = string(in.String())
		case "retweeted_status":
			easyjson9e1087fdDecode5(in, &out.RetweetedStatus)
		case "possibly_sensitive":
			out.PossiblySensitive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode(out *jwriter.Writer, in struct {
	Metadata struct {
		ResultType      string `json:"result_type"`
		IsoLanguageCode string `json:"iso_language_code"`
	} `json:"metadata"`
	CreatedAt            string      `json:"created_at"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	Text                 string      `json:"text"`
	Source               string      `json:"source"`
	Truncated            bool        `json:"truncated"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      int         `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   string      `json:"in_reply_to_user_id_str"`
	InReplyToScreenName  string      `json:"in_reply_to_screen_name"`
	User                 struct {
		ID          int         `json:"id"`
		IDStr       string      `json:"id_str"`
		Name        string      `json:"name"`
		ScreenName  string      `json:"screen_name"`
		Location    string      `json:"location"`
		Description string      `json:"description"`
		URL         interface{} `json:"url"`
		Entities    struct {
			Description struct {
				Urls []interface{} `json:"urls"`
			} `json:"description"`
		} `json:"entities"`
		Protected                      bool        `json:"protected"`
		FollowersCount                 int         `json:"followers_count"`
		FriendsCount                   int         `json:"friends_count"`
		ListedCount                    int         `json:"listed_count"`
		CreatedAt                      string      `json:"created_at"`
		FavouritesCount                int         `json:"favourites_count"`
		UtcOffset                      interface{} `json:"utc_offset"`
		TimeZone                       interface{} `json:"time_zone"`
		GeoEnabled                     bool        `json:"geo_enabled"`
		Verified                       bool        `json:"verified"`
		StatusesCount                  int         `json:"statuses_count"`
		Lang                           string      `json:"lang"`
		ContributorsEnabled            bool        `json:"contributors_enabled"`
		IsTranslator                   bool        `json:"is_translator"`
		IsTranslationEnabled           bool        `json:"is_translation_enabled"`
		ProfileBackgroundColor         string      `json:"profile_background_color"`
		ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool        `json:"profile_background_tile"`
		ProfileImageURL                string      `json:"profile_image_url"`
		ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
		ProfileBannerURL               string      `json:"profile_banner_url"`
		ProfileLinkColor               string      `json:"profile_link_color"`
		ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string      `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
		DefaultProfile                 bool        `json:"default_profile"`
		DefaultProfileImage            bool        `json:"default_profile_image"`
		Following                      bool        `json:"following"`
		FollowRequestSent              bool        `json:"follow_request_sent"`
		Notifications                  bool        `json:"notifications"`
	} `json:"user"`
	Geo           interface{} `json:"geo"`
	Coordinates   interface{} `json:"coordinates"`
	Place         interface{} `json:"place"`
	Contributors  interface{} `json:"contributors"`
	RetweetCount  int         `json:"retweet_count"`
	FavoriteCount int         `json:"favorite_count"`
	Entities      struct {
		Hashtags     []interface{} `json:"hashtags"`
		Symbols      []interface{} `json:"symbols"`
		Urls         []interface{} `json:"urls"`
		UserMentions []struct {
			ScreenName string `json:"screen_name"`
			Name       string `json:"name"`
			ID         int    `json:"id"`
			IDStr      string `json:"id_str"`
			Indices    []int  `json:"indices"`
		} `json:"user_mentions"`
	} `json:"entities"`
	Favorited       bool   `json:"favorited"`
	Retweeted       bool   `json:"retweeted"`
	Lang            string `json:"lang"`
	RetweetedStatus struct {
		Metadata struct {
			ResultType      string `json:"result_type"`
			IsoLanguageCode string `json:"iso_language_code"`
		} `json:"metadata"`
		CreatedAt            string      `json:"created_at"`
		ID                   int64       `json:"id"`
		IDStr                string      `json:"id_str"`
		Text                 string      `json:"text"`
		Source               string      `json:"source"`
		Truncated            bool        `json:"truncated"`
		InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
		InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
		InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
		InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
		InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
		User                 struct {
			ID          int         `json:"id"`
			IDStr       string      `json:"id_str"`
			Name        string      `json:"name"`
			ScreenName  string      `json:"screen_name"`
			Location    string      `json:"location"`
			Description string      `json:"description"`
			URL         interface{} `json:"url"`
			Entities    struct {
				Description struct {
					Urls []struct {
						URL         string `json:"url"`
						ExpandedURL string `json:"expanded_url"`
						DisplayURL  string `json:"display_url"`
						Indices     []int  `json:"indices"`
					} `json:"urls"`
				} `json:"description"`
			} `json:"entities"`
			Protected                      bool   `json:"protected"`
			FollowersCount                 int    `json:"followers_count"`
			FriendsCount                   int    `json:"friends_count"`
			ListedCount                    int    `json:"listed_count"`
			CreatedAt                      string `json:"created_at"`
			FavouritesCount                int    `json:"favourites_count"`
			UtcOffset                      int    `json:"utc_offset"`
			TimeZone                       string `json:"time_zone"`
			GeoEnabled                     bool   `json:"geo_enabled"`
			Verified                       bool   `json:"verified"`
			StatusesCount                  int    `json:"statuses_count"`
			Lang                           string `json:"lang"`
			ContributorsEnabled            bool   `json:"contributors_enabled"`
			IsTranslator                   bool   `json:"is_translator"`
			IsTranslationEnabled           bool   `json:"is_translation_enabled"`
			ProfileBackgroundColor         string `json:"profile_background_color"`
			ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
			ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
			ProfileBackgroundTile          bool   `json:"profile_background_tile"`
			ProfileImageURL                string `json:"profile_image_url"`
			ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
			ProfileBannerURL               string `json:"profile_banner_url"`
			ProfileLinkColor               string `json:"profile_link_color"`
			ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
			ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
			ProfileTextColor               string `json:"profile_text_color"`
			ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
			DefaultProfile                 bool   `json:"default_profile"`
			DefaultProfileImage            bool   `json:"default_profile_image"`
			Following                      bool   `json:"following"`
			FollowRequestSent              bool   `json:"follow_request_sent"`
			Notifications                  bool   `json:"notifications"`
		} `json:"user"`
		Geo           interface{} `json:"geo"`
		Coordinates   interface{} `json:"coordinates"`
		Place         interface{} `json:"place"`
		Contributors  interface{} `json:"contributors"`
		RetweetCount  int         `json:"retweet_count"`
		FavoriteCount int         `json:"favorite_count"`
		Entities      struct {
			Hashtags     []interface{} `json:"hashtags"`
			Symbols      []interface{} `json:"symbols"`
			Urls         []interface{} `json:"urls"`
			UserMentions []interface{} `json:"user_mentions"`
			Media        []struct {
				ID            int64  `json:"id"`
				IDStr         string `json:"id_str"`
				Indices       []int  `json:"indices"`
				MediaURL      string `json:"media_url"`
				MediaURLHTTPS string `json:"media_url_https"`
				URL           string `json:"url"`
				DisplayURL    string `json:"display_url"`
				ExpandedURL   string `json:"expanded_url"`
				Type          string `json:"type"`
				Sizes         struct {
					Medium struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"medium"`
					Small struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"small"`
					Thumb struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"thumb"`
					Large struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					} `json:"large"`
				} `json:"sizes"`
			} `json:"media"`
		} `json:"entities"`
		Favorited         bool   `json:"favorited"`
		Retweeted         bool   `json:"retweeted"`
		PossiblySensitive bool   `json:"possibly_sensitive"`
		Lang              string `json:"lang"`
	} `json:"retweeted_status,omitempty"`
	PossiblySensitive bool `json:"possibly_sensitive,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjson9e1087fdEncode2(out, in.Metadata)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id_str\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusIDStr.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusIDStr.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusIDStr))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		out.Int(int(in.InReplyToUserID))
	}
	{
		const prefix string = ",\"in_reply_to_user_id_str\":"
		out.RawString(prefix)
		out.String(string(in.InReplyToUserIDStr))
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		out.String(string(in.InReplyToScreenName))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode3(out, in.User)
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		if m, ok := in.Geo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Geo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Geo))
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if m, ok := in.Coordinates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coordinates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coordinates))
		}
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		if m, ok := in.Place.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Place.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Place))
		}
	}
	{
		const prefix string = ",\"contributors\":"
		out.RawString(prefix)
		if m, ok := in.Contributors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Contributors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Contributors))
		}
	}
	{
		const prefix string = ",\"retweet_count\":"
		out.RawString(prefix)
		out.Int(int(in.RetweetCount))
	}
	{
		const prefix string = ",\"favorite_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavoriteCount))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode4(out, in.Entities)
	}
	{
		const prefix string = ",\"favorited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorited))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	if true {
		const prefix string = ",\"retweeted_status\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode5(out, in.RetweetedStatus)
	}
	if in.PossiblySensitive {
		const prefix string = ",\"possibly_sensitive\":"
		out.RawString(prefix)
		out.Bool(bool(in.PossiblySensitive))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode5(in *jlexer.Lexer, out *struct {
	Metadata struct {
		ResultType      string `json:"result_type"`
		IsoLanguageCode string `json:"iso_language_code"`
	} `json:"metadata"`
	CreatedAt            string      `json:"created_at"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	Text                 string      `json:"text"`
	Source               string      `json:"source"`
	Truncated            bool        `json:"truncated"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
	InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
	User                 struct {
		ID          int         `json:"id"`
		IDStr       string      `json:"id_str"`
		Name        string      `json:"name"`
		ScreenName  string      `json:"screen_name"`
		Location    string      `json:"location"`
		Description string      `json:"description"`
		URL         interface{} `json:"url"`
		Entities    struct {
			Description struct {
				Urls []struct {
					URL         string `json:"url"`
					ExpandedURL string `json:"expanded_url"`
					DisplayURL  string `json:"display_url"`
					Indices     []int  `json:"indices"`
				} `json:"urls"`
			} `json:"description"`
		} `json:"entities"`
		Protected                      bool   `json:"protected"`
		FollowersCount                 int    `json:"followers_count"`
		FriendsCount                   int    `json:"friends_count"`
		ListedCount                    int    `json:"listed_count"`
		CreatedAt                      string `json:"created_at"`
		FavouritesCount                int    `json:"favourites_count"`
		UtcOffset                      int    `json:"utc_offset"`
		TimeZone                       string `json:"time_zone"`
		GeoEnabled                     bool   `json:"geo_enabled"`
		Verified                       bool   `json:"verified"`
		StatusesCount                  int    `json:"statuses_count"`
		Lang                           string `json:"lang"`
		ContributorsEnabled            bool   `json:"contributors_enabled"`
		IsTranslator                   bool   `json:"is_translator"`
		IsTranslationEnabled           bool   `json:"is_translation_enabled"`
		ProfileBackgroundColor         string `json:"profile_background_color"`
		ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool   `json:"profile_background_tile"`
		ProfileImageURL                string `json:"profile_image_url"`
		ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
		ProfileBannerURL               string `json:"profile_banner_url"`
		ProfileLinkColor               string `json:"profile_link_color"`
		ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
		DefaultProfile                 bool   `json:"default_profile"`
		DefaultProfileImage            bool   `json:"default_profile_image"`
		Following                      bool   `json:"following"`
		FollowRequestSent              bool   `json:"follow_request_sent"`
		Notifications                  bool   `json:"notifications"`
	} `json:"user"`
	Geo           interface{} `json:"geo"`
	Coordinates   interface{} `json:"coordinates"`
	Place         interface{} `json:"place"`
	Contributors  interface{} `json:"contributors"`
	RetweetCount  int         `json:"retweet_count"`
	FavoriteCount int         `json:"favorite_count"`
	Entities      struct {
		Hashtags     []interface{} `json:"hashtags"`
		Symbols      []interface{} `json:"symbols"`
		Urls         []interface{} `json:"urls"`
		UserMentions []interface{} `json:"user_mentions"`
		Media        []struct {
			ID            int64  `json:"id"`
			IDStr         string `json:"id_str"`
			Indices       []int  `json:"indices"`
			MediaURL      string `json:"media_url"`
			MediaURLHTTPS string `json:"media_url_https"`
			URL           string `json:"url"`
			DisplayURL    string `json:"display_url"`
			ExpandedURL   string `json:"expanded_url"`
			Type          string `json:"type"`
			Sizes         struct {
				Medium struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"medium"`
				Small struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"small"`
				Thumb struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"thumb"`
				Large struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"large"`
			} `json:"sizes"`
		} `json:"media"`
	} `json:"entities"`
	Favorited         bool   `json:"favorited"`
	Retweeted         bool   `json:"retweeted"`
	PossiblySensitive bool   `json:"possibly_sensitive"`
	Lang              string `json:"lang"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjson9e1087fdDecode2(in, &out.Metadata)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "in_reply_to_status_id":
			if m, ok := out.InReplyToStatusID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusID = in.Interface()
			}
		case "in_reply_to_status_id_str":
			if m, ok := out.InReplyToStatusIDStr.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusIDStr.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusIDStr = in.Interface()
			}
		case "in_reply_to_user_id":
			if m, ok := out.InReplyToUserID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToUserID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToUserID = in.Interface()
			}
		case "in_reply_to_user_id_str":
			if m, ok := out.InReplyToUserIDStr.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToUserIDStr.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToUserIDStr = in.Interface()
			}
		case "in_reply_to_screen_name":
			if m, ok := out.InReplyToScreenName.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToScreenName.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToScreenName = in.Interface()
			}
		case "user":
			easyjson9e1087fdDecode6(in, &out.User)
		case "geo":
			if m, ok := out.Geo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Geo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Geo = in.Interface()
			}
		case "coordinates":
			if m, ok := out.Coordinates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coordinates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coordinates = in.Interface()
			}
		case "place":
			if m, ok := out.Place.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Place.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Place = in.Interface()
			}
		case "contributors":
			if m, ok := out.Contributors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Contributors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Contributors = in.Interface()
			}
		case "retweet_count":
			out.RetweetCount = int(in.Int())
		case "favorite_count":
			out.FavoriteCount = int(in.Int())
		case "entities":
			easyjson9e1087fdDecode7(in, &out.Entities)
		case "favorited":
			out.Favorited = bool(in.Bool())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "possibly_sensitive":
			out.PossiblySensitive = bool(in.Bool())
		case "lang":
			out.Lang = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode5(out *jwriter.Writer, in struct {
	Metadata struct {
		ResultType      string `json:"result_type"`
		IsoLanguageCode string `json:"iso_language_code"`
	} `json:"metadata"`
	CreatedAt            string      `json:"created_at"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	Text                 string      `json:"text"`
	Source               string      `json:"source"`
	Truncated            bool        `json:"truncated"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
	InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
	User                 struct {
		ID          int         `json:"id"`
		IDStr       string      `json:"id_str"`
		Name        string      `json:"name"`
		ScreenName  string      `json:"screen_name"`
		Location    string      `json:"location"`
		Description string      `json:"description"`
		URL         interface{} `json:"url"`
		Entities    struct {
			Description struct {
				Urls []struct {
					URL         string `json:"url"`
					ExpandedURL string `json:"expanded_url"`
					DisplayURL  string `json:"display_url"`
					Indices     []int  `json:"indices"`
				} `json:"urls"`
			} `json:"description"`
		} `json:"entities"`
		Protected                      bool   `json:"protected"`
		FollowersCount                 int    `json:"followers_count"`
		FriendsCount                   int    `json:"friends_count"`
		ListedCount                    int    `json:"listed_count"`
		CreatedAt                      string `json:"created_at"`
		FavouritesCount                int    `json:"favourites_count"`
		UtcOffset                      int    `json:"utc_offset"`
		TimeZone                       string `json:"time_zone"`
		GeoEnabled                     bool   `json:"geo_enabled"`
		Verified                       bool   `json:"verified"`
		StatusesCount                  int    `json:"statuses_count"`
		Lang                           string `json:"lang"`
		ContributorsEnabled            bool   `json:"contributors_enabled"`
		IsTranslator                   bool   `json:"is_translator"`
		IsTranslationEnabled           bool   `json:"is_translation_enabled"`
		ProfileBackgroundColor         string `json:"profile_background_color"`
		ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool   `json:"profile_background_tile"`
		ProfileImageURL                string `json:"profile_image_url"`
		ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
		ProfileBannerURL               string `json:"profile_banner_url"`
		ProfileLinkColor               string `json:"profile_link_color"`
		ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
		DefaultProfile                 bool   `json:"default_profile"`
		DefaultProfileImage            bool   `json:"default_profile_image"`
		Following                      bool   `json:"following"`
		FollowRequestSent              bool   `json:"follow_request_sent"`
		Notifications                  bool   `json:"notifications"`
	} `json:"user"`
	Geo           interface{} `json:"geo"`
	Coordinates   interface{} `json:"coordinates"`
	Place         interface{} `json:"place"`
	Contributors  interface{} `json:"contributors"`
	RetweetCount  int         `json:"retweet_count"`
	FavoriteCount int         `json:"favorite_count"`
	Entities      struct {
		Hashtags     []interface{} `json:"hashtags"`
		Symbols      []interface{} `json:"symbols"`
		Urls         []interface{} `json:"urls"`
		UserMentions []interface{} `json:"user_mentions"`
		Media        []struct {
			ID            int64  `json:"id"`
			IDStr         string `json:"id_str"`
			Indices       []int  `json:"indices"`
			MediaURL      string `json:"media_url"`
			MediaURLHTTPS string `json:"media_url_https"`
			URL           string `json:"url"`
			DisplayURL    string `json:"display_url"`
			ExpandedURL   string `json:"expanded_url"`
			Type          string `json:"type"`
			Sizes         struct {
				Medium struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"medium"`
				Small struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"small"`
				Thumb struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"thumb"`
				Large struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				} `json:"large"`
			} `json:"sizes"`
		} `json:"media"`
	} `json:"entities"`
	Favorited         bool   `json:"favorited"`
	Retweeted         bool   `json:"retweeted"`
	PossiblySensitive bool   `json:"possibly_sensitive"`
	Lang              string `json:"lang"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjson9e1087fdEncode2(out, in.Metadata)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id_str\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusIDStr.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusIDStr.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusIDStr))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToUserID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToUserID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToUserID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id_str\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToUserIDStr.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToUserIDStr.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToUserIDStr))
		}
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToScreenName.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToScreenName.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToScreenName))
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode6(out, in.User)
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		if m, ok := in.Geo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Geo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Geo))
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if m, ok := in.Coordinates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coordinates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coordinates))
		}
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		if m, ok := in.Place.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Place.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Place))
		}
	}
	{
		const prefix string = ",\"contributors\":"
		out.RawString(prefix)
		if m, ok := in.Contributors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Contributors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Contributors))
		}
	}
	{
		const prefix string = ",\"retweet_count\":"
		out.RawString(prefix)
		out.Int(int(in.RetweetCount))
	}
	{
		const prefix string = ",\"favorite_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavoriteCount))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode7(out, in.Entities)
	}
	{
		const prefix string = ",\"favorited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorited))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"possibly_sensitive\":"
		out.RawString(prefix)
		out.Bool(bool(in.PossiblySensitive))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode7(in *jlexer.Lexer, out *struct {
	Hashtags     []interface{} `json:"hashtags"`
	Symbols      []interface{} `json:"symbols"`
	Urls         []interface{} `json:"urls"`
	UserMentions []interface{} `json:"user_mentions"`
	Media        []struct {
		ID            int64  `json:"id"`
		IDStr         string `json:"id_str"`
		Indices       []int  `json:"indices"`
		MediaURL      string `json:"media_url"`
		MediaURLHTTPS string `json:"media_url_https"`
		URL           string `json:"url"`
		DisplayURL    string `json:"display_url"`
		ExpandedURL   string `json:"expanded_url"`
		Type          string `json:"type"`
		Sizes         struct {
			Medium struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"medium"`
			Small struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"small"`
			Thumb struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"thumb"`
			Large struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"large"`
		} `json:"sizes"`
	} `json:"media"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashtags":
			if in.IsNull() {
				in.Skip()
				out.Hashtags = nil
			} else {
				in.Delim('[')
				if out.Hashtags == nil {
					if !in.IsDelim(']') {
						out.Hashtags = make([]interface{}, 0, 4)
					} else {
						out.Hashtags = []interface{}{}
					}
				} else {
					out.Hashtags = (out.Hashtags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Hashtags = append(out.Hashtags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]interface{}, 0, 4)
					} else {
						out.Symbols = []interface{}{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.Symbols = append(out.Symbols, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]interface{}, 0, 4)
					} else {
						out.Urls = []interface{}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					out.Urls = append(out.Urls, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_mentions":
			if in.IsNull() {
				in.Skip()
				out.UserMentions = nil
			} else {
				in.Delim('[')
				if out.UserMentions == nil {
					if !in.IsDelim(']') {
						out.UserMentions = make([]interface{}, 0, 4)
					} else {
						out.UserMentions = []interface{}{}
					}
				} else {
					out.UserMentions = (out.UserMentions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					out.UserMentions = append(out.UserMentions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]struct {
							ID            int64  `json:"id"`
							IDStr         string `json:"id_str"`
							Indices       []int  `json:"indices"`
							MediaURL      string `json:"media_url"`
							MediaURLHTTPS string `json:"media_url_https"`
							URL           string `json:"url"`
							DisplayURL    string `json:"display_url"`
							ExpandedURL   string `json:"expanded_url"`
							Type          string `json:"type"`
							Sizes         struct {
								Medium struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"medium"`
								Small struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"small"`
								Thumb struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"thumb"`
								Large struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"large"`
							} `json:"sizes"`
						}, 0, 0)
					} else {
						out.Media = []struct {
							ID            int64  `json:"id"`
							IDStr         string `json:"id_str"`
							Indices       []int  `json:"indices"`
							MediaURL      string `json:"media_url"`
							MediaURLHTTPS string `json:"media_url_https"`
							URL           string `json:"url"`
							DisplayURL    string `json:"display_url"`
							ExpandedURL   string `json:"expanded_url"`
							Type          string `json:"type"`
							Sizes         struct {
								Medium struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"medium"`
								Small struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"small"`
								Thumb struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"thumb"`
								Large struct {
									W      int    `json:"w"`
									H      int    `json:"h"`
									Resize string `json:"resize"`
								} `json:"large"`
							} `json:"sizes"`
						}{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v8 struct {
						ID            int64  `json:"id"`
						IDStr         string `json:"id_str"`
						Indices       []int  `json:"indices"`
						MediaURL      string `json:"media_url"`
						MediaURLHTTPS string `json:"media_url_https"`
						URL           string `json:"url"`
						DisplayURL    string `json:"display_url"`
						ExpandedURL   string `json:"expanded_url"`
						Type          string `json:"type"`
						Sizes         struct {
							Medium struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"medium"`
							Small struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"small"`
							Thumb struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"thumb"`
							Large struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"large"`
						} `json:"sizes"`
					}
					easyjson9e1087fdDecode8(in, &v8)
					out.Media = append(out.Media, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode7(out *jwriter.Writer, in struct {
	Hashtags     []interface{} `json:"hashtags"`
	Symbols      []interface{} `json:"symbols"`
	Urls         []interface{} `json:"urls"`
	UserMentions []interface{} `json:"user_mentions"`
	Media        []struct {
		ID            int64  `json:"id"`
		IDStr         string `json:"id_str"`
		Indices       []int  `json:"indices"`
		MediaURL      string `json:"media_url"`
		MediaURLHTTPS string `json:"media_url_https"`
		URL           string `json:"url"`
		DisplayURL    string `json:"display_url"`
		ExpandedURL   string `json:"expanded_url"`
		Type          string `json:"type"`
		Sizes         struct {
			Medium struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"medium"`
			Small struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"small"`
			Thumb struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"thumb"`
			Large struct {
				W      int    `json:"w"`
				H      int    `json:"h"`
				Resize string `json:"resize"`
			} `json:"large"`
		} `json:"sizes"`
	} `json:"media"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix[1:])
		if in.Hashtags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Hashtags {
				if v9 > 0 {
					out.RawByte(',')
				}
				if m, ok := v10.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Symbols {
				if v11 > 0 {
					out.RawByte(',')
				}
				if m, ok := v12.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Urls {
				if v13 > 0 {
					out.RawByte(',')
				}
				if m, ok := v14.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v14.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v14))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_mentions\":"
		out.RawString(prefix)
		if in.UserMentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.UserMentions {
				if v15 > 0 {
					out.RawByte(',')
				}
				if m, ok := v16.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v16.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v16))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		if in.Media == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Media {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson9e1087fdEncode8(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode8(in *jlexer.Lexer, out *struct {
	ID            int64  `json:"id"`
	IDStr         string `json:"id_str"`
	Indices       []int  `json:"indices"`
	MediaURL      string `json:"media_url"`
	MediaURLHTTPS string `json:"media_url_https"`
	URL           string `json:"url"`
	DisplayURL    string `json:"display_url"`
	ExpandedURL   string `json:"expanded_url"`
	Type          string `json:"type"`
	Sizes         struct {
		Medium struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"medium"`
		Small struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"small"`
		Thumb struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"thumb"`
		Large struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"large"`
	} `json:"sizes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v19 int
					v19 = int(in.Int())
					out.Indices = append(out.Indices, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "media_url":
			out.MediaURL = string(in.String())
		case "media_url_https":
			out.MediaURLHTTPS = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "display_url":
			out.DisplayURL = string(in.String())
		case "expanded_url":
			out.ExpandedURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "sizes":
			easyjson9e1087fdDecode9(in, &out.Sizes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode8(out *jwriter.Writer, in struct {
	ID            int64  `json:"id"`
	IDStr         string `json:"id_str"`
	Indices       []int  `json:"indices"`
	MediaURL      string `json:"media_url"`
	MediaURLHTTPS string `json:"media_url_https"`
	URL           string `json:"url"`
	DisplayURL    string `json:"display_url"`
	ExpandedURL   string `json:"expanded_url"`
	Type          string `json:"type"`
	Sizes         struct {
		Medium struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"medium"`
		Small struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"small"`
		Thumb struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"thumb"`
		Large struct {
			W      int    `json:"w"`
			H      int    `json:"h"`
			Resize string `json:"resize"`
		} `json:"large"`
	} `json:"sizes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Indices {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"media_url\":"
		out.RawString(prefix)
		out.String(string(in.MediaURL))
	}
	{
		const prefix string = ",\"media_url_https\":"
		out.RawString(prefix)
		out.String(string(in.MediaURLHTTPS))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"display_url\":"
		out.RawString(prefix)
		out.String(string(in.DisplayURL))
	}
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix)
		out.String(string(in.ExpandedURL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode9(out, in.Sizes)
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode9(in *jlexer.Lexer, out *struct {
	Medium struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"medium"`
	Small struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"small"`
	Thumb struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"thumb"`
	Large struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"large"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "medium":
			easyjson9e1087fdDecode10(in, &out.Medium)
		case "small":
			easyjson9e1087fdDecode10(in, &out.Small)
		case "thumb":
			easyjson9e1087fdDecode10(in, &out.Thumb)
		case "large":
			easyjson9e1087fdDecode10(in, &out.Large)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode9(out *jwriter.Writer, in struct {
	Medium struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"medium"`
	Small struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"small"`
	Thumb struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"thumb"`
	Large struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"large"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"medium\":"
		out.RawString(prefix[1:])
		easyjson9e1087fdEncode10(out, in.Medium)
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode10(out, in.Small)
	}
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode10(out, in.Thumb)
	}
	{
		const prefix string = ",\"large\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode10(out, in.Large)
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode10(in *jlexer.Lexer, out *struct {
	W      int    `json:"w"`
	H      int    `json:"h"`
	Resize string `json:"resize"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "resize":
			out.Resize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode10(out *jwriter.Writer, in struct {
	W      int    `json:"w"`
	H      int    `json:"h"`
	Resize string `json:"resize"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix[1:])
		out.Int(int(in.W))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.H))
	}
	{
		const prefix string = ",\"resize\":"
		out.RawString(prefix)
		out.String(string(in.Resize))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode6(in *jlexer.Lexer, out *struct {
	ID          int         `json:"id"`
	IDStr       string      `json:"id_str"`
	Name        string      `json:"name"`
	ScreenName  string      `json:"screen_name"`
	Location    string      `json:"location"`
	Description string      `json:"description"`
	URL         interface{} `json:"url"`
	Entities    struct {
		Description struct {
			Urls []struct {
				URL         string `json:"url"`
				ExpandedURL string `json:"expanded_url"`
				DisplayURL  string `json:"display_url"`
				Indices     []int  `json:"indices"`
			} `json:"urls"`
		} `json:"description"`
	} `json:"entities"`
	Protected                      bool   `json:"protected"`
	FollowersCount                 int    `json:"followers_count"`
	FriendsCount                   int    `json:"friends_count"`
	ListedCount                    int    `json:"listed_count"`
	CreatedAt                      string `json:"created_at"`
	FavouritesCount                int    `json:"favourites_count"`
	UtcOffset                      int    `json:"utc_offset"`
	TimeZone                       string `json:"time_zone"`
	GeoEnabled                     bool   `json:"geo_enabled"`
	Verified                       bool   `json:"verified"`
	StatusesCount                  int    `json:"statuses_count"`
	Lang                           string `json:"lang"`
	ContributorsEnabled            bool   `json:"contributors_enabled"`
	IsTranslator                   bool   `json:"is_translator"`
	IsTranslationEnabled           bool   `json:"is_translation_enabled"`
	ProfileBackgroundColor         string `json:"profile_background_color"`
	ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool   `json:"profile_background_tile"`
	ProfileImageURL                string `json:"profile_image_url"`
	ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
	ProfileBannerURL               string `json:"profile_banner_url"`
	ProfileLinkColor               string `json:"profile_link_color"`
	ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
	DefaultProfile                 bool   `json:"default_profile"`
	DefaultProfileImage            bool   `json:"default_profile_image"`
	Following                      bool   `json:"following"`
	FollowRequestSent              bool   `json:"follow_request_sent"`
	Notifications                  bool   `json:"notifications"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "id_str":
			out.IDStr = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			if m, ok := out.URL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.URL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.URL = in.Interface()
			}
		case "entities":
			easyjson9e1087fdDecode11(in, &out.Entities)
		case "protected":
			out.Protected = bool(in.Bool())
		case "followers_count":
			out.FollowersCount = int(in.Int())
		case "friends_count":
			out.FriendsCount = int(in.Int())
		case "listed_count":
			out.ListedCount = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "favourites_count":
			out.FavouritesCount = int(in.Int())
		case "utc_offset":
			out.UtcOffset = int(in.Int())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "geo_enabled":
			out.GeoEnabled = bool(in.Bool())
		case "verified":
			out.Verified = bool(in.Bool())
		case "statuses_count":
			out.StatusesCount = int(in.Int())
		case "lang":
			out.Lang = string(in.String())
		case "contributors_enabled":
			out.ContributorsEnabled = bool(in.Bool())
		case "is_translator":
			out.IsTranslator = bool(in.Bool())
		case "is_translation_enabled":
			out.IsTranslationEnabled = bool(in.Bool())
		case "profile_background_color":
			out.ProfileBackgroundColor = string(in.String())
		case "profile_background_image_url":
			out.ProfileBackgroundImageURL = string(in.String())
		case "profile_background_image_url_https":
			out.ProfileBackgroundImageURLHTTPS = string(in.String())
		case "profile_background_tile":
			out.ProfileBackgroundTile = bool(in.Bool())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "profile_image_url_https":
			out.ProfileImageURLHTTPS = string(in.String())
		case "profile_banner_url":
			out.ProfileBannerURL = string(in.String())
		case "profile_link_color":
			out.ProfileLinkColor = string(in.String())
		case "profile_sidebar_border_color":
			out.ProfileSidebarBorderColor = string(in.String())
		case "profile_sidebar_fill_color":
			out.ProfileSidebarFillColor = string(in.String())
		case "profile_text_color":
			out.ProfileTextColor = string(in.String())
		case "profile_use_background_image":
			out.ProfileUseBackgroundImage = bool(in.Bool())
		case "default_profile":
			out.DefaultProfile = bool(in.Bool())
		case "default_profile_image":
			out.DefaultProfileImage = bool(in.Bool())
		case "following":
			out.Following = bool(in.Bool())
		case "follow_request_sent":
			out.FollowRequestSent = bool(in.Bool())
		case "notifications":
			out.Notifications = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode6(out *jwriter.Writer, in struct {
	ID          int         `json:"id"`
	IDStr       string      `json:"id_str"`
	Name        string      `json:"name"`
	ScreenName  string      `json:"screen_name"`
	Location    string      `json:"location"`
	Description string      `json:"description"`
	URL         interface{} `json:"url"`
	Entities    struct {
		Description struct {
			Urls []struct {
				URL         string `json:"url"`
				ExpandedURL string `json:"expanded_url"`
				DisplayURL  string `json:"display_url"`
				Indices     []int  `json:"indices"`
			} `json:"urls"`
		} `json:"description"`
	} `json:"entities"`
	Protected                      bool   `json:"protected"`
	FollowersCount                 int    `json:"followers_count"`
	FriendsCount                   int    `json:"friends_count"`
	ListedCount                    int    `json:"listed_count"`
	CreatedAt                      string `json:"created_at"`
	FavouritesCount                int    `json:"favourites_count"`
	UtcOffset                      int    `json:"utc_offset"`
	TimeZone                       string `json:"time_zone"`
	GeoEnabled                     bool   `json:"geo_enabled"`
	Verified                       bool   `json:"verified"`
	StatusesCount                  int    `json:"statuses_count"`
	Lang                           string `json:"lang"`
	ContributorsEnabled            bool   `json:"contributors_enabled"`
	IsTranslator                   bool   `json:"is_translator"`
	IsTranslationEnabled           bool   `json:"is_translation_enabled"`
	ProfileBackgroundColor         string `json:"profile_background_color"`
	ProfileBackgroundImageURL      string `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool   `json:"profile_background_tile"`
	ProfileImageURL                string `json:"profile_image_url"`
	ProfileImageURLHTTPS           string `json:"profile_image_url_https"`
	ProfileBannerURL               string `json:"profile_banner_url"`
	ProfileLinkColor               string `json:"profile_link_color"`
	ProfileSidebarBorderColor      string `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool   `json:"profile_use_background_image"`
	DefaultProfile                 bool   `json:"default_profile"`
	DefaultProfileImage            bool   `json:"default_profile_image"`
	Following                      bool   `json:"following"`
	FollowRequestSent              bool   `json:"follow_request_sent"`
	Notifications                  bool   `json:"notifications"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		if m, ok := in.URL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.URL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.URL))
		}
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode11(out, in.Entities)
	}
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int(int(in.FollowersCount))
	}
	{
		const prefix string = ",\"friends_count\":"
		out.RawString(prefix)
		out.Int(int(in.FriendsCount))
	}
	{
		const prefix string = ",\"listed_count\":"
		out.RawString(prefix)
		out.Int(int(in.ListedCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"favourites_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavouritesCount))
	}
	{
		const prefix string = ",\"utc_offset\":"
		out.RawString(prefix)
		out.Int(int(in.UtcOffset))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"geo_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.GeoEnabled))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"statuses_count\":"
		out.RawString(prefix)
		out.Int(int(in.StatusesCount))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"contributors_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.ContributorsEnabled))
	}
	{
		const prefix string = ",\"is_translator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslator))
	}
	{
		const prefix string = ",\"is_translation_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslationEnabled))
	}
	{
		const prefix string = ",\"profile_background_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundColor))
	}
	{
		const prefix string = ",\"profile_background_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURL))
	}
	{
		const prefix string = ",\"profile_background_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_background_tile\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileBackgroundTile))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"profile_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_banner_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBannerURL))
	}
	{
		const prefix string = ",\"profile_link_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileLinkColor))
	}
	{
		const prefix string = ",\"profile_sidebar_border_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarBorderColor))
	}
	{
		const prefix string = ",\"profile_sidebar_fill_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarFillColor))
	}
	{
		const prefix string = ",\"profile_text_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileTextColor))
	}
	{
		const prefix string = ",\"profile_use_background_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileUseBackgroundImage))
	}
	{
		const prefix string = ",\"default_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfile))
	}
	{
		const prefix string = ",\"default_profile_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfileImage))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Bool(bool(in.Following))
	}
	{
		const prefix string = ",\"follow_request_sent\":"
		out.RawString(prefix)
		out.Bool(bool(in.FollowRequestSent))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		out.Bool(bool(in.Notifications))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode11(in *jlexer.Lexer, out *struct {
	Description struct {
		Urls []struct {
			URL         string `json:"url"`
			ExpandedURL string `json:"expanded_url"`
			DisplayURL  string `json:"display_url"`
			Indices     []int  `json:"indices"`
		} `json:"urls"`
	} `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			easyjson9e1087fdDecode12(in, &out.Description)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode11(out *jwriter.Writer, in struct {
	Description struct {
		Urls []struct {
			URL         string `json:"url"`
			ExpandedURL string `json:"expanded_url"`
			DisplayURL  string `json:"display_url"`
			Indices     []int  `json:"indices"`
		} `json:"urls"`
	} `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		easyjson9e1087fdEncode12(out, in.Description)
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode12(in *jlexer.Lexer, out *struct {
	Urls []struct {
		URL         string `json:"url"`
		ExpandedURL string `json:"expanded_url"`
		DisplayURL  string `json:"display_url"`
		Indices     []int  `json:"indices"`
	} `json:"urls"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]struct {
							URL         string `json:"url"`
							ExpandedURL string `json:"expanded_url"`
							DisplayURL  string `json:"display_url"`
							Indices     []int  `json:"indices"`
						}, 0, 0)
					} else {
						out.Urls = []struct {
							URL         string `json:"url"`
							ExpandedURL string `json:"expanded_url"`
							DisplayURL  string `json:"display_url"`
							Indices     []int  `json:"indices"`
						}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						URL         string `json:"url"`
						ExpandedURL string `json:"expanded_url"`
						DisplayURL  string `json:"display_url"`
						Indices     []int  `json:"indices"`
					}
					easyjson9e1087fdDecode13(in, &v22)
					out.Urls = append(out.Urls, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode12(out *jwriter.Writer, in struct {
	Urls []struct {
		URL         string `json:"url"`
		ExpandedURL string `json:"expanded_url"`
		DisplayURL  string `json:"display_url"`
		Indices     []int  `json:"indices"`
	} `json:"urls"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Urls {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson9e1087fdEncode13(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode13(in *jlexer.Lexer, out *struct {
	URL         string `json:"url"`
	ExpandedURL string `json:"expanded_url"`
	DisplayURL  string `json:"display_url"`
	Indices     []int  `json:"indices"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "expanded_url":
			out.ExpandedURL = string(in.String())
		case "display_url":
			out.DisplayURL = string(in.String())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int
					v25 = int(in.Int())
					out.Indices = append(out.Indices, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode13(out *jwriter.Writer, in struct {
	URL         string `json:"url"`
	ExpandedURL string `json:"expanded_url"`
	DisplayURL  string `json:"display_url"`
	Indices     []int  `json:"indices"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix)
		out.String(string(in.ExpandedURL))
	}
	{
		const prefix string = ",\"display_url\":"
		out.RawString(prefix)
		out.String(string(in.DisplayURL))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Indices {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode4(in *jlexer.Lexer, out *struct {
	Hashtags     []interface{} `json:"hashtags"`
	Symbols      []interface{} `json:"symbols"`
	Urls         []interface{} `json:"urls"`
	UserMentions []struct {
		ScreenName string `json:"screen_name"`
		Name       string `json:"name"`
		ID         int    `json:"id"`
		IDStr      string `json:"id_str"`
		Indices    []int  `json:"indices"`
	} `json:"user_mentions"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashtags":
			if in.IsNull() {
				in.Skip()
				out.Hashtags = nil
			} else {
				in.Delim('[')
				if out.Hashtags == nil {
					if !in.IsDelim(']') {
						out.Hashtags = make([]interface{}, 0, 4)
					} else {
						out.Hashtags = []interface{}{}
					}
				} else {
					out.Hashtags = (out.Hashtags)[:0]
				}
				for !in.IsDelim(']') {
					var v28 interface{}
					if m, ok := v28.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v28.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v28 = in.Interface()
					}
					out.Hashtags = append(out.Hashtags, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]interface{}, 0, 4)
					} else {
						out.Symbols = []interface{}{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v29 interface{}
					if m, ok := v29.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v29.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v29 = in.Interface()
					}
					out.Symbols = append(out.Symbols, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]interface{}, 0, 4)
					} else {
						out.Urls = []interface{}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v30 interface{}
					if m, ok := v30.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v30.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v30 = in.Interface()
					}
					out.Urls = append(out.Urls, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_mentions":
			if in.IsNull() {
				in.Skip()
				out.UserMentions = nil
			} else {
				in.Delim('[')
				if out.UserMentions == nil {
					if !in.IsDelim(']') {
						out.UserMentions = make([]struct {
							ScreenName string `json:"screen_name"`
							Name       string `json:"name"`
							ID         int    `json:"id"`
							IDStr      string `json:"id_str"`
							Indices    []int  `json:"indices"`
						}, 0, 0)
					} else {
						out.UserMentions = []struct {
							ScreenName string `json:"screen_name"`
							Name       string `json:"name"`
							ID         int    `json:"id"`
							IDStr      string `json:"id_str"`
							Indices    []int  `json:"indices"`
						}{}
					}
				} else {
					out.UserMentions = (out.UserMentions)[:0]
				}
				for !in.IsDelim(']') {
					var v31 struct {
						ScreenName string `json:"screen_name"`
						Name       string `json:"name"`
						ID         int    `json:"id"`
						IDStr      string `json:"id_str"`
						Indices    []int  `json:"indices"`
					}
					easyjson9e1087fdDecode14(in, &v31)
					out.UserMentions = append(out.UserMentions, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode4(out *jwriter.Writer, in struct {
	Hashtags     []interface{} `json:"hashtags"`
	Symbols      []interface{} `json:"symbols"`
	Urls         []interface{} `json:"urls"`
	UserMentions []struct {
		ScreenName string `json:"screen_name"`
		Name       string `json:"name"`
		ID         int    `json:"id"`
		IDStr      string `json:"id_str"`
		Indices    []int  `json:"indices"`
	} `json:"user_mentions"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix[1:])
		if in.Hashtags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Hashtags {
				if v32 > 0 {
					out.RawByte(',')
				}
				if m, ok := v33.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v33.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v33))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Symbols {
				if v34 > 0 {
					out.RawByte(',')
				}
				if m, ok := v35.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v35.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v35))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Urls {
				if v36 > 0 {
					out.RawByte(',')
				}
				if m, ok := v37.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v37.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v37))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_mentions\":"
		out.RawString(prefix)
		if in.UserMentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.UserMentions {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjson9e1087fdEncode14(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode14(in *jlexer.Lexer, out *struct {
	ScreenName string `json:"screen_name"`
	Name       string `json:"name"`
	ID         int    `json:"id"`
	IDStr      string `json:"id_str"`
	Indices    []int  `json:"indices"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "screen_name":
			out.ScreenName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "id_str":
			out.IDStr = string(in.String())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v40 int
					v40 = int(in.Int())
					out.Indices = append(out.Indices, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode14(out *jwriter.Writer, in struct {
	ScreenName string `json:"screen_name"`
	Name       string `json:"name"`
	ID         int    `json:"id"`
	IDStr      string `json:"id_str"`
	Indices    []int  `json:"indices"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Indices {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v42))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode3(in *jlexer.Lexer, out *struct {
	ID          int         `json:"id"`
	IDStr       string      `json:"id_str"`
	Name        string      `json:"name"`
	ScreenName  string      `json:"screen_name"`
	Location    string      `json:"location"`
	Description string      `json:"description"`
	URL         interface{} `json:"url"`
	Entities    struct {
		Description struct {
			Urls []interface{} `json:"urls"`
		} `json:"description"`
	} `json:"entities"`
	Protected                      bool        `json:"protected"`
	FollowersCount                 int         `json:"followers_count"`
	FriendsCount                   int         `json:"friends_count"`
	ListedCount                    int         `json:"listed_count"`
	CreatedAt                      string      `json:"created_at"`
	FavouritesCount                int         `json:"favourites_count"`
	UtcOffset                      interface{} `json:"utc_offset"`
	TimeZone                       interface{} `json:"time_zone"`
	GeoEnabled                     bool        `json:"geo_enabled"`
	Verified                       bool        `json:"verified"`
	StatusesCount                  int         `json:"statuses_count"`
	Lang                           string      `json:"lang"`
	ContributorsEnabled            bool        `json:"contributors_enabled"`
	IsTranslator                   bool        `json:"is_translator"`
	IsTranslationEnabled           bool        `json:"is_translation_enabled"`
	ProfileBackgroundColor         string      `json:"profile_background_color"`
	ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool        `json:"profile_background_tile"`
	ProfileImageURL                string      `json:"profile_image_url"`
	ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
	ProfileBannerURL               string      `json:"profile_banner_url"`
	ProfileLinkColor               string      `json:"profile_link_color"`
	ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string      `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
	DefaultProfile                 bool        `json:"default_profile"`
	DefaultProfileImage            bool        `json:"default_profile_image"`
	Following                      bool        `json:"following"`
	FollowRequestSent              bool        `json:"follow_request_sent"`
	Notifications                  bool        `json:"notifications"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "id_str":
			out.IDStr = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			if m, ok := out.URL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.URL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.URL = in.Interface()
			}
		case "entities":
			easyjson9e1087fdDecode15(in, &out.Entities)
		case "protected":
			out.Protected = bool(in.Bool())
		case "followers_count":
			out.FollowersCount = int(in.Int())
		case "friends_count":
			out.FriendsCount = int(in.Int())
		case "listed_count":
			out.ListedCount = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "favourites_count":
			out.FavouritesCount = int(in.Int())
		case "utc_offset":
			if m, ok := out.UtcOffset.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UtcOffset.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UtcOffset = in.Interface()
			}
		case "time_zone":
			if m, ok := out.TimeZone.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.TimeZone.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.TimeZone = in.Interface()
			}
		case "geo_enabled":
			out.GeoEnabled = bool(in.Bool())
		case "verified":
			out.Verified = bool(in.Bool())
		case "statuses_count":
			out.StatusesCount = int(in.Int())
		case "lang":
			out.Lang = string(in.String())
		case "contributors_enabled":
			out.ContributorsEnabled = bool(in.Bool())
		case "is_translator":
			out.IsTranslator = bool(in.Bool())
		case "is_translation_enabled":
			out.IsTranslationEnabled = bool(in.Bool())
		case "profile_background_color":
			out.ProfileBackgroundColor = string(in.String())
		case "profile_background_image_url":
			out.ProfileBackgroundImageURL = string(in.String())
		case "profile_background_image_url_https":
			out.ProfileBackgroundImageURLHTTPS = string(in.String())
		case "profile_background_tile":
			out.ProfileBackgroundTile = bool(in.Bool())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "profile_image_url_https":
			out.ProfileImageURLHTTPS = string(in.String())
		case "profile_banner_url":
			out.ProfileBannerURL = string(in.String())
		case "profile_link_color":
			out.ProfileLinkColor = string(in.String())
		case "profile_sidebar_border_color":
			out.ProfileSidebarBorderColor = string(in.String())
		case "profile_sidebar_fill_color":
			out.ProfileSidebarFillColor = string(in.String())
		case "profile_text_color":
			out.ProfileTextColor = string(in.String())
		case "profile_use_background_image":
			out.ProfileUseBackgroundImage = bool(in.Bool())
		case "default_profile":
			out.DefaultProfile = bool(in.Bool())
		case "default_profile_image":
			out.DefaultProfileImage = bool(in.Bool())
		case "following":
			out.Following = bool(in.Bool())
		case "follow_request_sent":
			out.FollowRequestSent = bool(in.Bool())
		case "notifications":
			out.Notifications = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode3(out *jwriter.Writer, in struct {
	ID          int         `json:"id"`
	IDStr       string      `json:"id_str"`
	Name        string      `json:"name"`
	ScreenName  string      `json:"screen_name"`
	Location    string      `json:"location"`
	Description string      `json:"description"`
	URL         interface{} `json:"url"`
	Entities    struct {
		Description struct {
			Urls []interface{} `json:"urls"`
		} `json:"description"`
	} `json:"entities"`
	Protected                      bool        `json:"protected"`
	FollowersCount                 int         `json:"followers_count"`
	FriendsCount                   int         `json:"friends_count"`
	ListedCount                    int         `json:"listed_count"`
	CreatedAt                      string      `json:"created_at"`
	FavouritesCount                int         `json:"favourites_count"`
	UtcOffset                      interface{} `json:"utc_offset"`
	TimeZone                       interface{} `json:"time_zone"`
	GeoEnabled                     bool        `json:"geo_enabled"`
	Verified                       bool        `json:"verified"`
	StatusesCount                  int         `json:"statuses_count"`
	Lang                           string      `json:"lang"`
	ContributorsEnabled            bool        `json:"contributors_enabled"`
	IsTranslator                   bool        `json:"is_translator"`
	IsTranslationEnabled           bool        `json:"is_translation_enabled"`
	ProfileBackgroundColor         string      `json:"profile_background_color"`
	ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool        `json:"profile_background_tile"`
	ProfileImageURL                string      `json:"profile_image_url"`
	ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
	ProfileBannerURL               string      `json:"profile_banner_url"`
	ProfileLinkColor               string      `json:"profile_link_color"`
	ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string      `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
	DefaultProfile                 bool        `json:"default_profile"`
	DefaultProfileImage            bool        `json:"default_profile_image"`
	Following                      bool        `json:"following"`
	FollowRequestSent              bool        `json:"follow_request_sent"`
	Notifications                  bool        `json:"notifications"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		if m, ok := in.URL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.URL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.URL))
		}
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjson9e1087fdEncode15(out, in.Entities)
	}
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int(int(in.FollowersCount))
	}
	{
		const prefix string = ",\"friends_count\":"
		out.RawString(prefix)
		out.Int(int(in.FriendsCount))
	}
	{
		const prefix string = ",\"listed_count\":"
		out.RawString(prefix)
		out.Int(int(in.ListedCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"favourites_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavouritesCount))
	}
	{
		const prefix string = ",\"utc_offset\":"
		out.RawString(prefix)
		if m, ok := in.UtcOffset.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UtcOffset.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UtcOffset))
		}
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		if m, ok := in.TimeZone.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.TimeZone.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.TimeZone))
		}
	}
	{
		const prefix string = ",\"geo_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.GeoEnabled))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"statuses_count\":"
		out.RawString(prefix)
		out.Int(int(in.StatusesCount))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"contributors_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.ContributorsEnabled))
	}
	{
		const prefix string = ",\"is_translator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslator))
	}
	{
		const prefix string = ",\"is_translation_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslationEnabled))
	}
	{
		const prefix string = ",\"profile_background_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundColor))
	}
	{
		const prefix string = ",\"profile_background_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURL))
	}
	{
		const prefix string = ",\"profile_background_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_background_tile\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileBackgroundTile))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"profile_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_banner_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBannerURL))
	}
	{
		const prefix string = ",\"profile_link_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileLinkColor))
	}
	{
		const prefix string = ",\"profile_sidebar_border_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarBorderColor))
	}
	{
		const prefix string = ",\"profile_sidebar_fill_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarFillColor))
	}
	{
		const prefix string = ",\"profile_text_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileTextColor))
	}
	{
		const prefix string = ",\"profile_use_background_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileUseBackgroundImage))
	}
	{
		const prefix string = ",\"default_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfile))
	}
	{
		const prefix string = ",\"default_profile_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfileImage))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Bool(bool(in.Following))
	}
	{
		const prefix string = ",\"follow_request_sent\":"
		out.RawString(prefix)
		out.Bool(bool(in.FollowRequestSent))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		out.Bool(bool(in.Notifications))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode15(in *jlexer.Lexer, out *struct {
	Description struct {
		Urls []interface{} `json:"urls"`
	} `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			easyjson9e1087fdDecode16(in, &out.Description)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode15(out *jwriter.Writer, in struct {
	Description struct {
		Urls []interface{} `json:"urls"`
	} `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		easyjson9e1087fdEncode16(out, in.Description)
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode16(in *jlexer.Lexer, out *struct {
	Urls []interface{} `json:"urls"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]interface{}, 0, 4)
					} else {
						out.Urls = []interface{}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v43 interface{}
					if m, ok := v43.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v43.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v43 = in.Interface()
					}
					out.Urls = append(out.Urls, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode16(out *jwriter.Writer, in struct {
	Urls []interface{} `json:"urls"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Urls {
				if v44 > 0 {
					out.RawByte(',')
				}
				if m, ok := v45.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v45.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v45))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecode2(in *jlexer.Lexer, out *struct {
	ResultType      string `json:"result_type"`
	IsoLanguageCode string `json:"iso_language_code"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result_type":
			out.ResultType = string(in.String())
		case "iso_language_code":
			out.IsoLanguageCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncode2(out *jwriter.Writer, in struct {
	ResultType      string `json:"result_type"`
	IsoLanguageCode string `json:"iso_language_code"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ResultType))
	}
	{
		const prefix string = ",\"iso_language_code\":"
		out.RawString(prefix)
		out.String(string(in.IsoLanguageCode))
	}
	out.RawByte('}')
}
